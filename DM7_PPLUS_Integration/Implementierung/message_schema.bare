### Port & Adapter Messages ###
type Authentication_Request {
	user: string
	password: string
}

type Authentication_Result (Authentication_Succeeded | Authentication_Failed)
type Authentication_Succeeded { token: i32 }
type Authentication_Failed { reason: string }

type Query_Message {
	token: i32
	query: data # Verschlüsselte Query
}

type Response_Message (Query_Succeeded | Query_Failed)
type Query_Succeeded data # Enthält verschlüsseltes Query_Result
type Query_Failed { reason: string }

type Command_Message {
	token: i32
	command: data # Verschlüsseltes Command
}

type Command_Response_Message (Command_Succeeded | Command_Failed)
type Command_Succeeded data # Enthält verschlüsseltes Command_Result
type Command_Failed { reason: string }

type Capabilities []Capability

# Neue Capabilities nur anhängen !! Nicht ändern !!
enum Capability {
	MITARBEITER_V1
	DIENSTE_V1
	DIENSTBUCHUNGEN_V1
	ABWESENHEITEN_V1
	SOLL_IST_ABGLEICH_V1
}

### Queries ###
type Query (
	Mitarbeiter_abrufen_V1
	| Mitarbeiter_abrufen_ab_V1
	| Dienste_abrufen_V1
	| Dienste_abrufen_ab_V1
	| Dienstbuchungen_zum_Stichtag_V1
	| Abwesenheiten_zum_Stichtag_V1
)

type Mitarbeiter_abrufen_V1 void
type Mitarbeiter_abrufen_ab_V1 Datenstand
type Dienste_abrufen_V1 void
type Dienste_abrufen_ab_V1 Datenstand
type Abwesenheiten_zum_Stichtag_V1 {
	stichtag: Datum
	mandant: UUID
}
type Dienstbuchungen_zum_Stichtag_V1 {
	stichtag: Datum
	mandant: UUID
}

type Query_Result (
	IO_Fehler
	| Mitarbeiterliste_V1
	| Dienste_V1
	| Dienstbuchungen_V1
	| Abwesenheiten_V1
)

type IO_Fehler { reason: string }

type Mitarbeiterliste_V1 {
	mitarbeiter: []Mitarbeiter_V1
	stand: Datenstand
}

type Dienste_V1 {
	dienste: []Dienst_V1
	stand: Datenstand
}

type Dienstbuchungen_V1 []Dienstbuchung_V1

type Abwesenheiten_V1 []Abwesenheit_V1

### Commands ###
type Command (Soll_Ist_Abgleich_freigeben_V1)

type Command_Result (IO_Fehler | Soll_Ist_Abgleich_Verarbeitungsergebnis_V1)

type Soll_Ist_Abgleich_freigeben_V1 Soll_Ist_Abgleich_V1

### Daten ###
type Mitarbeiter_V1 {
	id: UUID
	mandantenzugehoerigkeiten: []DM7_Mandantenzugehoerigkeit_V1
	titel: UUID
	vorname: string
	nachname: string
	postanschrift: optional<Postanschrift_V1>
	geburtstag: optional<Datum>
	familienstand: UUID
	konfession: UUID
	qualifikationen: []Qualifikation_V1
	handzeichen: string
	personalnummer: string
	geschlecht: UUID
	kontakte: []Kontakt_V1
}

type DM7_Mandantenzugehoerigkeit_V1 {
	mandantId: UUID
	gueltigAb: Datum
	gueltigBis: optional<Datum>
}

type Postanschrift_V1 {
	id: UUID
	strasse: string
	postleitzahl: string
	ort: string
	land: string
}

type Qualifikation_V1 {
	stufe: u8
	bezeichnung: string
	gueltigAb: Datum
	gueltigBis: optional<Datum>
}

type Kontakt_V1 {
	art: UUID
	form: UUID
	eintrag: string
}

type Dienst_V1 {
	id: uint
	mandantenzugehoerigkeiten: []DM7_Mandantenzugehoerigkeit_V1
	kurzbezeichnung: string
	bezeichnung: string
	gueltigAn: Dienst_Gueltigkeit_V1
	geloescht: bool
}

type Dienst_Gueltigkeit_V1 {
	montag: bool
	dienstag: bool
	mittwoch: bool
	donnerstag: bool
	freitag: bool
	samstag: bool
	sonntag: bool
	feiertags: bool
}

type Dienstbuchung_V1 {
	mitarbeiter: UUID
	dienst: int
	beginntUm: Uhrzeit
}

type Abwesenheit_V1 {
	mitarbeiter: UUID
	abwesendAb: Zeitpunkt
	vorraussichtlichWiederVerfuegbarAb: Zeitpunkt
	grund: string
	art: Abwesenheitsart_V1
}

enum Abwesenheitsart_V1 {
	FEHLZEIT
	ANDERSWEITIG_VERPLANT
}

type Soll_Ist_Abgleich_V1 {
	ungeplanteTourenOhneTourenstamm: []Ungeplante_Tour_V1
	geplanteTouren: []Geplante_Tour_V1
	nichtGefahreneTouren: []Nicht_gefahrene_Tour_V1
}

type Ungeplante_Tour_V1 {
	mitarbeiter: UUID
	mandant: UUID
	beginn: Zeitpunkt
	einsaetze: []Einsatz_V1
}

type Geplante_Tour_V1 {
	mitarbeiter: UUID
	mandant: UUID
	dienst: int
	beginn: Zeitpunkt
	einsaetze: []Einsatz_V1
}

type Nicht_gefahrene_Tour_V1 {
	mitarbeiter: UUID
	mandant: UUID
	dienst: int
	datum: Datum
}

type Einsatz_V1 {
	beginn: Relative_Zeit
	dauerInMinuten: uint
	anfahrtsdauerInMinuten: uint
	abfahrtsdauerInMinuten: uint
	art: Einsatzart_V1
}

type Einsatzart_V1 (Klient_Einsatz_V1 | Sonstige_Zeit_V1 | Pause_V1 | Unterbrechung_V1)
type Klient_Einsatz_V1 void
type Sonstige_Zeit_V1 { leistung: UUID }
type Pause_V1 void
type Unterbrechung_V1 void

type Soll_Ist_Abgleich_Verarbeitungsergebnis_V1 (Verarbeitet_V1 | Dienstplanabschluss_verhindert_Verarbeitung_V1)
type Verarbeitet_V1 void
type Dienstplanabschluss_verhindert_Verarbeitung_V1 []Dienstplanabschluss_V1

type Dienstplanabschluss_V1 {
	mitarbeiter: UUID
	mandant: UUID
	datum: Datum
}

type UUID data<16>
type Datum { tag: u8 monat: u8 jahr: u16 }
type Uhrzeit { stunden: u8 minuten: u8 }
type Zeitpunkt { datum: Datum uhrzeit: Uhrzeit }
type Relative_Zeit { zeit: Uhrzeit amFolgetag: bool }
type Datenstand u64