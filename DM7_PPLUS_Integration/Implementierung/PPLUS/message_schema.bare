### Port & Adapter Messages ###
type AuthenticationRequest {
	user: string
	password: string
}

type AuthenticationResult (AuthenticationSucceeded | AuthenticationFailed)
type AuthenticationSucceeded { token: i32 }
type AuthenticationFailed { reason: string }

type QueryMessage {
	token: i32
	query: data # Verschlüsselte Query
}

type ResponseMessage (QuerySucceeded | QueryFailed)
type QuerySucceeded data # Enthält verschlüsseltes QueryResult
type QueryFailed { reason: string }

type CommandMessage {
	token: i32
	command: data # Verschlüsseltes Command
}

type CommandResponseMessage (CommandSucceeded | CommandFailed)
type CommandSucceeded data # Enthält verschlüsseltes CommandResult
type CommandFailed { reason: string }

type Capabilities []Capability

# Neue Capabilities nur anhängen !! Nicht ändern !!
enum Capability {
	MITARBEITER_V1
	DIENSTE_V1
	BEGINN_VON_DIENST_V1
	DIENSTBUCHUNGEN_V1
	ABWESENHEITEN_V1
	SOLL_IST_ABGLEICH_V1
}

### Queries ###
type Query (
	MitarbeiterAbrufenV1
	| MitarbeiterAbrufenAbV1
	| DiensteAbrufenV1
	| DiensteAbrufenAbV1
	| DienstbeginnZumStichtagV1
	| DienstbuchungenImZeitraumV1
	| AbwesenheitenImZeitraumV1
	| DienstbuchungsUeberwachungszeitraumV1
)

type MitarbeiterAbrufenV1 void
type MitarbeiterAbrufenAbV1 Datenstand
type DiensteAbrufenV1 void
type DienstbeginnZumStichtagV1 {
	stichtag: Datum
	dienst: uint
}
type DiensteAbrufenAbV1 Datenstand
type DienstbuchungenImZeitraumV1 {
	von: Datum
	bis: Datum
	mandant: UUID
}
type AbwesenheitenImZeitraumV1 {
	von: Datum
	bis: Datum
	mandant: UUID
}
type DienstbuchungsUeberwachungszeitraumV1 void

type QueryResult (
	IOFehler
	| MitarbeiterlisteV1
	| DiensteV1
	| DienstbeginnV1
	| DienstbuchungenV1
	| AbwesenheitenV1
	| AnzahlTageV1
)

type IOFehler { reason: string }

type MitarbeiterlisteV1 {
	mitarbeiter: []MitarbeiterV1
	stand: Datenstand
}

type DiensteV1 {
	dienste: []DienstV1
	stand: Datenstand
}

type DienstbeginnV1 optional<Uhrzeit>

type DienstbuchungenV1 []{ datum: Datum  dienstbuchungen: []DienstbuchungV1 }

type AbwesenheitenV1 []AbwesenheitV1

type AnzahlTageV1 AnzahlTage

### Commands ###
type Command (SollIstAbgleichFreigebenV1)

type CommandResult (IOFehler | SollIstAbgleichVerarbeitungsergebnisV1)

type SollIstAbgleichFreigebenV1 SollIstAbgleichV1

### Daten ###
type MitarbeiterV1 {
	id: UUID
	personenId : UUID
	mandantenzugehoerigkeiten: []DM7MandantenzugehoerigkeitV1
	titel: UUID
	vorname: string
	nachname: string
	postanschrift: optional<PostanschriftV1>
	geburtstag: optional<Datum>
	familienstand: UUID
	konfession: UUID
	qualifikationen: []QualifikationV1
	handzeichen: string
	personalnummer: string
	geschlecht: UUID
	kontakte: []KontaktV1
	pinFuerMobileDatenerfassung: optional<string>
}

type DM7MandantenzugehoerigkeitV1 {
	mandantId: UUID
	gueltigAb: Datum
	gueltigBis: optional<Datum>
}

type PostanschriftV1 {
	id: UUID
	strasse: string
	postleitzahl: string
	ort: string
	land: string
}

type QualifikationV1 {
	stufe: u8
	bezeichnung: string
	gueltigAb: Datum
	gueltigBis: optional<Datum>
}

type KontaktV1 {
	art: UUID
	form: UUID
	eintrag: string
	hauptkontakt: bool
}

type DienstV1 {
	id: uint
	mandantenzugehoerigkeiten: []DM7MandantenzugehoerigkeitV1
	kurzbezeichnung: string
	bezeichnung: string
	gueltigAn: DienstGueltigkeitV1
	geloescht: bool
}

type DienstGueltigkeitV1 {
	montag: bool
	dienstag: bool
	mittwoch: bool
	donnerstag: bool
	freitag: bool
	samstag: bool
	sonntag: bool
	feiertags: bool
}

type DienstbuchungV1 {
	mitarbeiter: UUID
	dienst: int
	beginntUm: Uhrzeit
}

type AbwesenheitV1 {
	mitarbeiter: UUID
	abwesendAb: Zeitpunkt
	vorraussichtlichWiederVerfuegbarAb: optional<Zeitpunkt>
	grund: string
	art: AbwesenheitsartV1
}

enum AbwesenheitsartV1 {
	FEHLZEIT
	ANDERWEITIG_VERPLANT
}

type SollIstAbgleichV1 {
	datum: Datum
	ungeplanteTourenOhneTourenstamm: []UngeplanteTourV1
	geplanteTouren: []GeplanteTourV1
	nichtGefahreneTouren: []NichtGefahreneTourV1
}

type UngeplanteTourV1 {
	mitarbeiter: UUID
	mandant: UUID
	einsaetze: []EinsatzV1
}

type GeplanteTourV1 {
	mitarbeiter: UUID
	mandant: UUID
	dienst: int
	einsaetze: []EinsatzV1
}

type NichtGefahreneTourV1 {
	mitarbeiter: UUID
	mandant: UUID
	dienst: int
}

type EinsatzV1 {
	beginn: RelativeZeit
	dauerInMinuten: uint
	anfahrtsdauerInMinuten: uint
	abfahrtsdauerInMinuten: uint
	art: EinsatzartV1
}

type EinsatzartV1 (KlientEinsatzV1 | SonstigeZeitV1 | PauseV1 | UnterbrechungV1)
type KlientEinsatzV1 void
type SonstigeZeitV1 { leistung: UUID }
type PauseV1 void
type UnterbrechungV1 void

type SollIstAbgleichVerarbeitungsergebnisV1 (VerarbeitetV1 | DienstplanabschlussVerhindertVerarbeitungV1)
type VerarbeitetV1 void
type DienstplanabschlussVerhindertVerarbeitungV1 []DienstplanabschlussV1

type DienstplanabschlussV1 {
	mitarbeiter: UUID
	mandant: UUID
	datum: Datum
}

type UUID data<16>
type Datum { tag: u8 monat: u8 jahr: u16 }
type Uhrzeit { stunden: u8 minuten: u8 }
type Zeitpunkt { datum: Datum uhrzeit: Uhrzeit }
type RelativeZeit { zeit: Uhrzeit amFolgetag: bool }
type Datenstand u64
type AnzahlTage int